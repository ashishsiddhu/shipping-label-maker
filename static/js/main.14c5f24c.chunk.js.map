{"version":3,"sources":["interface/labelInterface.js","component/step/senderAddress.js","component/step/receiverAddress.js","component/step/packageWeight.js","component/step/shippingOption.js","component/step/reviewConfirm.js","logo.svg","component/header.js","component/navigation.js","component/wizard.js","App.js","reportWebVitals.js","index.js"],"names":["LabelInterface","from","name","street","city","state","zip","to","weight","shippingOption","SenderAddress","props","formValidation","wizardContext","onAction","useEffect","React","Children","map","children","console","log","Container","Form","noValidate","validated","className","Row","Group","as","Col","controlId","Label","Control","placeholder","onChange","value","field","required","Feedback","type","ReceiverAddress","PackageWeight","ref","forwardRef","ShippingOption","Check","id","Input","checked","ReviewConfirm","useState","setShippingOption","shippingTotal","setshippingTotal","getShippingOption","getShippingCost","option","total","toFixed","renderSenderAndReceiverData","data","Card","Table","striped","hover","responsive","style","textAlign","colSpan","bordered","Header","Navbar","collapseOnSelect","expand","variant","Brand","Navigation","idVal","backButtonText","currentStep","secondaryButtonText","Button","onClick","previousStep","nextStep","size","Wizard","setCurrentStep","setFormValidation","setWizardContext","showAlert","setShowAlert","packageWeightRef","useRef","handleWeight","e","current","target","getAttribute","handleShipping","handleNameAndAddress","success","a","requestOptions","method","headers","body","JSON","stringify","fetch","response","json","document","documentElement","scrollTop","ProgressBar","now","Alert","onClose","dismissible","Link","window","location","reload","print","src","logo","alt","showAlertContainer","Body","wizardSteps","prev","contextData","length","Object","keys","filter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.14c5f24c.chunk.js","sourcesContent":["const LabelInterface = {\r\n    from: {\r\n        name: \"\",\r\n        street: \"\",\r\n        city: \"\",\r\n        state: \"\",\r\n        zip: \"\"\r\n    },\r\n    to: {\r\n        name: \"\",\r\n        street: \"\",\r\n        city: \"\",\r\n        state: \"\",\r\n        zip: \"\"\r\n    },\r\n    weight: \"\",\r\n    shippingOption: \"0\"\r\n  };\r\n  \r\nexport default LabelInterface;","import React,{useEffect} from \"react\";\r\nimport { Row, Col, Container, Form } from 'react-bootstrap';\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction SenderAddress(props) {\r\n    const {\r\n        formValidation,\r\n        wizardContext,\r\n        onAction\r\n    } = props;\r\n    useEffect(()=>{\r\n        React.Children.map(children=>{\r\n            console.log(\"Hii\",children);\r\n        });\r\n    },[props])\r\n    return (<div>\r\n        <Container>\r\n            <h4>Enter the sender's address:</h4>\r\n            <hr />\r\n            <Form noValidate validated={formValidation} className=\"text-left\">\r\n                <Row className=\"mb-3\">\r\n                    <Form.Group as={Col} controlId=\"from\">\r\n                        <Form.Label>Name*</Form.Label>\r\n                        <Form.Control placeholder=\"Enter full name\" onChange={onAction}\r\n                            value={wizardContext.name} field=\"name\" required />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please enter full name\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Row>\r\n                <Form.Group className=\"mb-3\" controlId=\"from\">\r\n                    <Form.Label>Address*</Form.Label>\r\n                    <Form.Control placeholder=\"Enter current city\" onChange={onAction}\r\n                        value={wizardContext.street} field=\"street\" required />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        Please enter address\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Row className=\"mb-3\">\r\n                    <Form.Group as={Col} controlId=\"from\">\r\n                        <Form.Label>City*</Form.Label>\r\n                        <Form.Control placeholder=\"Enter current city\" onChange={onAction}\r\n                            value={wizardContext.city} field=\"city\" required />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please enter city\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"from\">\r\n                        <Form.Label>State*</Form.Label>\r\n                        <Form.Control placeholder=\"Enter current state\" onChange={onAction}\r\n                            value={wizardContext.state} field=\"state\" required />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please enter state\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"from\">\r\n                        <Form.Label>Zip*</Form.Label>\r\n                        <Form.Control type=\"number\" placeholder=\"Enter current zip code\" onChange={onAction}\r\n                            value={wizardContext.zip} field=\"zip\" required />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please enter zip code\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Row>\r\n            </Form>\r\n        </Container>\r\n    </div>)\r\n}\r\n\r\n\r\nSenderAddress.propTypes = {\r\n    onAction: PropTypes.func.isRequired,\r\n    formValidation: PropTypes.bool.isRequired,\r\n    wizardContext: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default SenderAddress;","import { Row, Col, Container, Form } from 'react-bootstrap';\r\nimport PropTypes from \"prop-types\";\r\nfunction ReceiverAddress(props) {\r\n    // const senderDetails = props.wizardContext;\r\n    const {\r\n        formValidation,\r\n        wizardContext,\r\n        onAction\r\n    } = props;\r\n    \r\n    return (<div>\r\n        <Container>\r\n            <h4>Enter the receiver's address:</h4>\r\n            <hr />\r\n            <Form noValidate validated={formValidation} className=\"text-left\">\r\n                <Row className=\"mb-3\">\r\n                    <Form.Group as={Col} controlId=\"to\">\r\n                        <Form.Label>Name*</Form.Label>\r\n                        <Form.Control placeholder=\"Enter full name\" onChange={onAction}\r\n                            value={wizardContext.name} field=\"name\" required />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please enter full name\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Row>\r\n                <Form.Group className=\"mb-3\" controlId=\"to\">\r\n                    <Form.Label>Address*</Form.Label>\r\n                    <Form.Control placeholder=\"Enter current city\" onChange={onAction}\r\n                        value={wizardContext.street} field=\"street\" required />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        Please enter address\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Row className=\"mb-3\">\r\n                    <Form.Group as={Col} controlId=\"to\">\r\n                        <Form.Label>City*</Form.Label>\r\n                        <Form.Control placeholder=\"Enter current city\" onChange={onAction}\r\n                            value={wizardContext.city} field=\"city\" required />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please enter city\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"to\">\r\n                        <Form.Label>State*</Form.Label>\r\n                        <Form.Control placeholder=\"Enter current state\" onChange={onAction}\r\n                            value={wizardContext.state} field=\"state\" required />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please enter state\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"to\">\r\n                        <Form.Label>Zip*</Form.Label>\r\n                        <Form.Control placeholder=\"Enter current zip code\" onChange={onAction}\r\n                            value={wizardContext.zip} field=\"zip\" required />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please enter zip code\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Row>\r\n            </Form>\r\n        </Container>\r\n    </div>)\r\n}\r\n\r\nReceiverAddress.propTypes = {\r\n    onAction: PropTypes.func.isRequired,\r\n    formValidation: PropTypes.bool.isRequired,\r\n    wizardContext: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ReceiverAddress;","import { forwardRef } from \"react\";\r\nimport { Form, Container } from 'react-bootstrap';\r\nimport PropTypes from \"prop-types\";\r\nfunction PackageWeight(props,ref) {\r\n    const {\r\n        onAction,\r\n        formValidation,\r\n        wizardContext,\r\n      } = props;\r\n    return (\r\n        <Container>\r\n            <h4>Enter the weight:</h4>\r\n            <hr />\r\n            <Form noValidate validated={formValidation} className=\"text-left\">\r\n                <Form.Group className=\"mb-3\" controlId=\"weight\">\r\n                    <Form.Label>Weight*</Form.Label>\r\n                    <Form.Control placeholder=\"Enter weight in lbs\" onChange={onAction}\r\n                        value={wizardContext.weight} required ref={ref}/>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        Please enter weight\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n            </Form>\r\n        </Container>\r\n    );\r\n}\r\n\r\nPackageWeight.propTypes = {\r\n    onAction: PropTypes.func.isRequired,\r\n    formValidation: PropTypes.bool.isRequired,\r\n    wizardContext: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default forwardRef(PackageWeight);","import { Form, Container } from 'react-bootstrap';\r\nimport PropTypes from \"prop-types\";\r\nfunction ShippingOption (props) {\r\n    const {\r\n        onAction,\r\n        formValidation,\r\n        wizardContext,\r\n      } = props;\r\n\r\n    return (\r\n        <Container>\r\n          <h4>Enter the shipping option:</h4>\r\n          <br />\r\n            <Form noValidate validated={formValidation}>\r\n                <Form.Group>\r\n                    <Form.Check type={'radio'} id={'shippingOption'}>\r\n                        <Form.Check.Input \r\n                            type={'radio'}\r\n                            name= {'shippingOption'}\r\n                            onChange={onAction}\r\n                            value=\"1\"\r\n                            checked= {wizardContext.shippingOption === \"1\"}\r\n                            required \r\n                        />\r\n                        <span>&nbsp;{' '}&nbsp;</span>\r\n                        <Form.Check.Label>{`Ground`}</Form.Check.Label>\r\n                    </Form.Check>\r\n                    <Form.Check type={'radio'} id={'shippingOption2'}>\r\n                        <Form.Check.Input \r\n                            type={'radio'}\r\n                            name= {'shippingOption'}\r\n                            onChange={onAction}\r\n                            value=\"2\"\r\n                            checked= {wizardContext.shippingOption === \"2\"}\r\n                            required \r\n                        />\r\n                        <span>&nbsp;{' '}&nbsp;</span>\r\n                        <Form.Check.Label>{`Priority`}</Form.Check.Label>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please select shipping option\r\n                        </Form.Control.Feedback>\r\n                    </Form.Check>\r\n                </Form.Group>\r\n            </Form>\r\n        </Container>\r\n    );\r\n}\r\n\r\nShippingOption.propTypes = {\r\n    onAction: PropTypes.func.isRequired,\r\n    formValidation: PropTypes.bool.isRequired,\r\n    wizardContext: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ShippingOption;","import { useEffect, useState } from \"react\";\r\nimport { Card, Table } from 'react-bootstrap';\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ReviewConfirm(props) {\r\n    //   const [wizardContext, setWizardContext] = useState(props.wizardContext);\r\n    const { wizardContext } = props;\r\n    const [shippingOption, setShippingOption] = useState(\" \");\r\n    const [shippingTotal, setshippingTotal] = useState(0);\r\n    useEffect(() => {\r\n        getShippingOption();\r\n        getShippingCost();\r\n    })\r\n\r\n    const getShippingOption = () => {\r\n        const option =\r\n            wizardContext.shippingOption === \"1\" ? \"Ground\" : \"Priority\";\r\n        setShippingOption(option);\r\n    };\r\n\r\n    // shipping cost calculation\r\n    const getShippingCost = () => {\r\n        const weight = wizardContext.weight;\r\n        const ShippingOption = wizardContext.shippingOption;\r\n\r\n        const shippingRate = 0.4,\r\n            shippingCost = weight * shippingRate * (ShippingOption === \"1\" ? 1 : 1.5);\r\n\r\n        const total = shippingCost.toFixed(2);\r\n        setshippingTotal(total);\r\n    };\r\n\r\n    // const confirm = () => {\r\n    //     // props.onAction(wizardContext);\r\n    // }\r\n\r\n    const renderSenderAndReceiverData = (data, type) => {\r\n        return (\r\n            <Card className=\"mb-3\">\r\n                <Table striped hover responsive style={{ textAlign: \"left\" }}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th colSpan=\"3\">{type}:</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td colSpan=\"3\">{data.name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td colSpan=\"3\">{data.street}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>{data.city}</td>\r\n                            <td>{data.state}</td>\r\n                            <td>{data.zip}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n    const renderShipingData = () => {\r\n        // let weightUnit = type===\"Weight\" && \"lbs\";\r\n        // let dollar = type===\"Shipping Total\" && \"$\";\r\n        return (\r\n            <Card className=\"mb-3\">\r\n                <Table striped bordered hover responsive>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Weight:</th>\r\n                            <th>Shipping Method:</th>\r\n                            <th>Shipping Total:</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td> {wizardContext.weight} lbs</td>\r\n                            <td> {shippingOption}</td>\r\n                            <td> ${shippingTotal}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {renderSenderAndReceiverData(wizardContext.from, \"From\")}\r\n            {renderSenderAndReceiverData(wizardContext.to, \"To\")}\r\n            {renderShipingData()}\r\n        </>\r\n    );\r\n}\r\n\r\nReviewConfirm.propTypes = {\r\n    wizardContext: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ReviewConfirm;","export default __webpack_public_path__ + \"static/media/logo.2bd93092.svg\";","import { Navbar, Container } from 'react-bootstrap';\r\nfunction Header() {\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"lg\" className=\"header-bg\" variant=\"light\">\r\n            <Container>\r\n                <Navbar.Brand className=\"mx-auto py-3\">\r\n                    <h3>Shipping Label Marker</h3>\r\n                </Navbar.Brand>\r\n            </Container>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default Header;","import { Button, Container } from 'react-bootstrap';\r\nimport PropTypes from \"prop-types\";\r\nfunction Navigation (props){\r\n    let backButtonText = props.currentStep === 5 ? \"Modify\" : \"Previous\";\r\n    let secondaryButtonText = props.currentStep === 5 ? \"Confirm\" : \" Next \";\r\n    let idVal;\r\n    if(props.currentStep === 1) {\r\n        idVal = \"from\";\r\n    } else if (props.currentStep === 2) {\r\n        idVal = \"to\";\r\n    } else if (props.currentStep === 3) {\r\n        idVal = \"weight\";\r\n    } else {\r\n        idVal = \"shippingOption\";\r\n    }\r\n\r\n    return (\r\n        <Container className=\"my-3 pb-3\">\r\n            {props.currentStep < 2 ? null : (\r\n                <Button onClick={props.previousStep} className=\"shadow\">\r\n                    {backButtonText}\r\n                </Button>\r\n            )}\r\n            <span>&nbsp;{' '}&nbsp;</span>\r\n            <Button onClick={props.nextStep} variant=\"success\" size=\"md\" id={idVal} className=\"shadow\">\r\n                &nbsp; {secondaryButtonText} &nbsp;\r\n            </Button>\r\n        </Container>\r\n    );\r\n}\r\n\r\nNavigation.propTypes = {\r\n    currentStep: PropTypes.number.isRequired,\r\n    nextStep: PropTypes.func.isRequired,\r\n    previousStep: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Navigation;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { ProgressBar } from 'react-bootstrap';\r\nimport LabelInterface from \"../interface/labelInterface\";\r\nimport SenderAddress from \"./step/senderAddress\";\r\nimport ReceiverAddress from \"./step/receiverAddress\";\r\nimport PackageWeight from \"./step/packageWeight\";\r\nimport ShippingOption from \"./step/shippingOption\";\r\nimport ReviewConfirm from \"./step/reviewConfirm\";\r\nimport logo from '../logo.svg';\r\nimport Header from \"./header\";\r\nimport { Card, Container, Alert } from 'react-bootstrap';\r\nimport Navigation from './navigation';\r\n\r\nfunction Wizard() {\r\n    const [currentStep, setCurrentStep] = useState(0);\r\n    const [formValidation, setFormValidation] = useState(false);\r\n    const [wizardContext, setWizardContext] = useState(LabelInterface);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const packageWeightRef = useRef(null);\r\n    \r\n    useEffect (()=>{\r\n        setCurrentStep(1);\r\n    },[])\r\n\r\n    /**\r\n     * handle weight package input field\r\n     * @param {object} e\r\n     */\r\n    const handleWeight = (e) => {\r\n        // const value = e.target.value,\r\n        const value = packageWeightRef.current.value,\r\n          id = e.target.getAttribute(\"id\");\r\n        wizardContext[id] = value;\r\n        setWizardContext({ ...wizardContext });\r\n    }\r\n    \r\n    /**\r\n     * handle shipping option field input\r\n     * @param {object} e\r\n     */\r\n    const handleShipping = (e) => {\r\n        const value = e.target.value,\r\n          id = e.target.getAttribute(\"name\");\r\n        wizardContext[id] = value;\r\n        setWizardContext({ ...wizardContext });\r\n    }\r\n\r\n    /**\r\n     * handle input field changes to sender and receiver\r\n     * @param {object} e\r\n     */\r\n    const handleNameAndAddress = (e) => {\r\n        const value = e.target.value,\r\n          field = e.target.getAttribute(\"field\"),\r\n          id = e.target.getAttribute(\"id\");\r\n        wizardContext[id][field] = value;\r\n        setWizardContext({ ...wizardContext });\r\n    }\r\n\r\n    /**\r\n     * Validate and proceed to next steps\r\n     * @param {object} e\r\n     */\r\n    const nextStep = (e) => {\r\n      // \r\n      if(currentStep===5) {\r\n          success();\r\n          return;\r\n      }\r\n      const id = e.target.getAttribute(\"id\");\r\n      const contextData = wizardContext[id];\r\n      if (id === \"weight\" || id === \"shippingOption\") {\r\n          // For packageWeight and shippingOptions components\r\n          if (contextData.length === 0 || contextData === \"0\") {\r\n              setFormValidation(true); // enable form validation to render invalid information\r\n          } else {\r\n              setCurrentStep((prev) => prev + 1); // Increase currentStep count\r\n              setFormValidation(false); // disable form validation\r\n          }\r\n      } else {\r\n          // For Sender and Receiver components\r\n          // Validating either \"contextData\" object contains empty value or not\r\n          let validateObj = Object.keys(contextData).filter(a => {\r\n              return contextData[a].length === 0;\r\n          })\r\n          if (validateObj.length) {\r\n              setFormValidation(true); // enable form validation to render invalid information\r\n          } else {\r\n              setCurrentStep((prev) => prev + 1); // Increase currentStep count\r\n              setFormValidation(false); // disable form validation\r\n          }\r\n      }\r\n    }\r\n\r\n    // Go back previous steps\r\n    const previousStep = () => {\r\n        setCurrentStep((prev) => prev - 1);\r\n        setShowAlert(false);\r\n    }\r\n\r\n    const success = async () => {\r\n      // send data to backend using API\r\n      const requestOptions = {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(wizardContext)\r\n      };\r\n      try {\r\n          let response = await fetch(\"https://reqres.in/api/posts\", requestOptions);\r\n          let data = await response.json();\r\n          console.log(\"API Response success\", data);\r\n          setShowAlert(true); // show alert conatainer\r\n          document.documentElement.scrollTop = 0; // scroll to top\r\n      } catch(e) {\r\n          console.log(\"API Response Error\", e);\r\n      }\r\n    }\r\n\r\n    // Render alert container\r\n    const showAlertContainer = () => {\r\n      if(showAlert) {\r\n        return (\r\n          <Alert variant=\"success\" id=\"modalBox\" className=\"mt-2\" onClose={() => setShowAlert(false)} dismissible>\r\n              Congratulation! Your order placed successfully... &nbsp;\r\n              <Alert.Link onClick={()=>window.location.reload()}>Place new order</Alert.Link>.\r\n              <div className=\"print-block\">\r\n                  <Alert.Link onClick={()=>window.print()}>\r\n                      Print shipping label: <img src={logo} className=\"print-image\" alt=\"logo\"/>\r\n                  </Alert.Link>\r\n              </div>\r\n          </Alert>\r\n        )\r\n      }\r\n    }\r\n\r\n    //wizard steps\r\n    const wizardSteps = () => {\r\n      switch (currentStep) {\r\n        case 1:\r\n          return <SenderAddress\r\n                    wizardContext={wizardContext.from}\r\n                    onAction={handleNameAndAddress}\r\n                    formValidation={formValidation} />;\r\n        case 2:\r\n          return <ReceiverAddress\r\n                    wizardContext={wizardContext.to}\r\n                    onAction={handleNameAndAddress}\r\n                    formValidation={formValidation} />;\r\n        case 3:\r\n          return <PackageWeight\r\n                    wizardContext={wizardContext}\r\n                    onAction={handleWeight}\r\n                    ref={packageWeightRef}\r\n                    formValidation={formValidation} />;\r\n        case 4:\r\n          return <ShippingOption \r\n                    wizardContext={wizardContext} \r\n                    onAction={handleShipping} \r\n                    formValidation={formValidation} />;\r\n        case 5:\r\n          return <ReviewConfirm \r\n                    wizardContext={wizardContext} \r\n                    onAction={success} />;\r\n        default:\r\n      }\r\n    }\r\n\r\n    return (\r\n        <>\r\n          <Header />\r\n          <Container className=\"screen-width\">\r\n              <ProgressBar striped now={currentStep * 20} className=\"mt-3\" variant={currentStep === 5 && \"success\"} />\r\n              {showAlertContainer()}\r\n              <Card className=\"mt-3 shadow py-1 bg-body rounded card-padding\">\r\n                  <Card.Body>\r\n                    {wizardSteps()}\r\n                  </Card.Body>\r\n              </Card>\r\n              {!showAlert && <Navigation\r\n                previousStep={previousStep}\r\n                nextStep={nextStep}\r\n                currentStep={currentStep}\r\n              />}\r\n          </Container>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default Wizard;","import Wizard from \"./component/wizard\";\nimport Test from \"./component/Test\";\n// import background from \"./images/background.jpeg\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Wizard />\n        {/* <img src={\"./background.jpg\"} /> */}\n        {/* <Test /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}